import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { getLoggedInUser, getLoggedInUserOrders, updateUser } from "./userAPI";

const initialState = {
  userOrders: [],
  status: "idle",
  userInfo: null,
};

export const getLoggedInUserOrdersAsync = createAsyncThunk(
  "user/getLoggedInUserOrders",
  async () => {
    const response = await getLoggedInUserOrders();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const updateUserAsync = createAsyncThunk(
  "user/updateUser",
  async (userData) => {
    const response = await updateUser(userData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const getLoggedInUserAsync = createAsyncThunk(
  "user/getLoggedInUser",
  async () => {
    const response = await getLoggedInUser();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetUserInfo: (state) => {
      state.userInfo = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getLoggedInUserOrdersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getLoggedInUserOrdersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userOrders = action.payload;
      })
      .addCase(updateUserAsync.pending, (state, action) => {
        state.status = "loading";
      })
      .addCase(updateUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userInfo = action.payload;
      })
      .addCase(getLoggedInUserAsync.pending, (state, action) => {
        state.status = "loading";
      })
      .addCase(getLoggedInUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userInfo = action.payload;
      });
  },
});

export const { resetUserInfo } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state.
export const selectUserOrders = (state) => state.user.userOrders;
export const selectUserInfo = (state) => state.user.userInfo;
export const selectUserOrderStatus = (state) => state.user.status;

export default userSlice.reducer;
