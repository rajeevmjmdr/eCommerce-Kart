import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getLoggedInUserOrders } from './userAPI';

const initialState = {
  userOrders: [],
  status: 'idle',
};

export const getLoggedInUserOrdersAsync = createAsyncThunk(
  'user/getLoggedInUserOrders',
  async (userId) => {
    const response = await getLoggedInUserOrders(userId);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getLoggedInUserOrdersAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getLoggedInUserOrdersAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.userOrders = action.payload;
      });
  },
});

//export const { increment} = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state.
export const selectUserOrders= (state) => state.user.userOrders;

export default userSlice.reducer;
